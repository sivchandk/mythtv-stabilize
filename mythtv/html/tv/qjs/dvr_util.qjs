<%
// This file is used SERVER SIDE only, it MUST comply to ECMA Script 5.1 and not
// use jQuery or any other client side extensions.
//
// e.g. ECMA Script 5.1 cannot parse ISO DateTime strings

"use strict";

import "/js/utility.js"

    var args = arguments[1];
    function getArg(name)
    {
        name = name.toLowerCase();
        return args[name];
    }

    var myth = new Myth();

    function recStatusToClass(statusInt)
    {
        var dvr = new Dvr();
        var statusStr = dvr.RecStatusToString(statusInt);
        var statusClass = "program" + statusStr.replace(/ /g, '');
        return statusClass;
    }

    function scheduleSimpleRecording(chanID, startTime, type)
    {
        var dvr = new Dvr();

        var recRule = dvr.GetRecordSchedule(0, "", chanID, startTime, false);

        // Prevent duplicate recording rules being created
        if (recRule.Id > 0 && recRule.Type == type)
            return chanID + "#" + startTime.toISOString() + "#" + recRule.Id;

        if (type == "Record All (Channel)")
        {
            type = "Record All";
            recRule.Filter |= 1024;
        }

        recRule.Type = type;

        var recRuleId = dvr.AddRecordSchedule(recRule);

        return chanID + "#" + startTime.toISOString() + "#" + recRuleId;
    }

    function checkRecordingStatus(chanID, startTime)
    {
        var guide = new Guide();
        var program = guide.GetProgramDetails(chanID, startTime);
        return chanID + "#" + startTime.toISOString()  + "#" + recStatusToClass(program.Recording.Status);
    }

    function deleteRecRule(recRuleID, chanID, startTime)
    {
        var dvr = new Dvr();
        dvr.RemoveRecordSchedule(recRuleID);
        return chanID + "#" + startTime.toISOString()  + "#" + recRuleID;
    }

    function deleteRecording(chanID, startTime, allowReRecord)
    {
        var dvr = new Dvr();
        dvr.RemoveRecorded(chanID, startTime, false, allowReRecord);
        return chanID + "#" + startTime.toISOString();
    }

    var ret;
    switch (args.action)
    {
        case "simpleRecord":
            var validDate = myth.ParseISODateString(getArg("StartTime"));
            ret = scheduleSimpleRecording(getArg("ChanID"), validDate, getArg("Type"));
            break;
        case "checkRecStatus":
            var validDate = myth.ParseISODateString(getArg("StartTime"));
            ret = checkRecordingStatus(getArg("ChanID"), validDate);
            break;
        case "deleteRecRule":
            var validDate = myth.ParseISODateString(getArg("StartTime"));
            ret = deleteRecRule(args.recruleid, getArg("ChanID"), validDate);
            break;
        case "deleteRecording":
            var validDate = myth.ParseISODateString(getArg("StartTime"));
            ret = deleteRecording(getArg("ChanID"), validDate, getArg("AllowRerecord") == 1);
        default:
            break;
    }
%>
<%=ret%>
